import React, { useState, useEffect } from 'react';
import { Form, Input, InputNumber, Button, Card, message, Select, DatePicker, Spin, Row, Col } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import moment from 'moment';
import { fetchDataList, createItem } from '../../../utils/api/requestHelpers';
import { fetchAndSetList } from '../../../utils/api/fetchHelpers';
import '../../../utils/css/Custom-Update.css';
import NumericInput from '../../../utils/jsx/NumericInput';

const { Option } = Select;

const AddContract = ({ onCancel, onSuccess, disabled }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [accounts, setAccounts] = useState([]);
  const [contract_types, setContract_Types] = useState([]);

  useEffect(() => {
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/warehouse/accounts', setAccounts, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng').finally(() => setFetchLoading(false));
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/warehouse/contract-types', setContract_Types, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch lo·∫°i h√†ng').finally(() => setFetchLoading(false));
    form.setFieldsValue({ngay_ky_hop_dong: moment()});
    form.setFieldsValue({ngay_bat_dau: moment()});
  }, []);

  const onFinish = async (values) => {
        setLoading(true);
        try {
          const payload = {
            ...values,
            ngay_ky_hop_dong: values.ngay_ky_hop_dong?.format('YYYY-MM-DD'),
            ngay_bat_dau: values.ngay_bat_dau?.format('YYYY-MM-DD'),
            ngay_ket_thuc: values.ngay_ket_thuc?.format('YYYY-MM-DD'),
          };
    
          console.log('üöÄ Payload g·ª≠i ƒëi:', payload);
    
          const response = await createItem('https://dx.hoangphucthanh.vn:3000/warehouse/contracts', payload);
    
          console.log('üì¶ K·∫øt qu·∫£ th√™m m·ªõi:', response);
    
          if (response && response.status && response.status >= 400) {
            throw new Error('Th√™m m·ªõi th·∫•t b·∫°i t·ª´ server');
          }
    
          message.success('Th√™m m·ªõi h·ª£p ƒë·ªìng th√†nh c√¥ng!');
          onSuccess?.(); // Callback reload data
        } catch (error) {
          console.error('L·ªói th√™m m·ªõi:', error);
          message.error('Kh√¥ng th·ªÉ th√™m m·ªõi h·ª£p ƒë·ªìng');
        } finally {
          setLoading(false);
        }
      };

  return (
    <div className="edit-container">
      {fetchLoading ? (
        <div className="loading-container">
          <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
        </div>
      ) : (
        <>
          <h2 className="edit-title" style={{ marginBottom: 24 }}>Th√™m m·ªõi H·ª£p ƒê·ªìng</h2>
          <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="so_hop_dong" label="S·ªë h·ª£p ƒë·ªìng" 
                    rules={[
                        { required: true, message: 'S·ªë h·ª£p ƒë·ªìng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' },
                        {
                            pattern: /^[^a-z]+$/,
                            message: 'Kh√¥ng ƒë∆∞·ª£c ch·ª©a ch·ªØ th∆∞·ªùng (a‚Äìz)',
                        },
                    ]}
                >
                  <Input  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="loai_hop_dong" label="Lo·∫°i h·ª£p ƒë·ªìng" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn lo·∫°i h·ª£p ƒë·ªìng">
                    {contract_types.map(contract => (
                      <Option key={contract.ma_loai_hop_dong} value={contract.ma_loai_hop_dong}>
                        {contract.ten_loai_hop_dong}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="ngay_ky_hop_dong" label="Ng√†y k√Ω h·ª£p ƒë·ªìng" >
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="gia_tri_hop_dong" label="Gi√° tr·ªã h·ª£p ƒë·ªìng" >
                <NumericInput style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="ngay_bat_dau" label="Ng√†y b·∫Øt ƒë·∫ßu" >
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="ngay_ket_thuc" label="Ng√†y k·∫øt th√∫c" >
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="trang_thai_hop_dong" label="Tr·∫°ng th√°i" rules={[{ required: true }]}>
                  <Select>
                    {['C√≤n hi·ªáu l·ª±c', 'H·∫øt h·∫°n', 'ƒê√£ h·ªßy'].map(status => (
                      <Option key={status} value={status}>{status}</Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="doi_tac_lien_quan" label="ƒê·ªëi t√°c li√™n quan" rules={[{ required: true }]}>
                  <Input />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="dieu_khoan_thanh_toan" label="ƒêi·ªÅu kho·∫£n thanh to√°n">
                  <Input />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="tep_dinh_kem" label="T·ªáp ƒë√≠nh k√®m">
                  <Input disabled />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="vi_tri_luu_tru" label="V·ªã tr√≠ l∆∞u tr·ªØ">
                  <Input disabled />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="nguoi_tao" label="Ng∆∞·ªùi t·∫°o" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ng∆∞·ªùi t·∫°o">
                    {accounts.map(account => (
                      <Option key={account.ma_nguoi_dung} value={account.ma_nguoi_dung}>
                        {account.ho_va_ten}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Form.Item name="mo_ta" label="M√¥ t·∫£">
              <Input.TextArea rows={3} />
            </Form.Item>
            <div className="form-actions">
                <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading} disabled={disabled}>Th√™m</Button>
                <Button icon={<CloseOutlined />} onClick={onCancel} danger>H·ªßy</Button>
            </div>
          </Form>
        </>
      )}
    </div>
  );
};

export default AddContract;
