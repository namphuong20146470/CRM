import React, { useState, useEffect } from 'react';
import { Form, Input, InputNumber, Button, Card, message, Select, DatePicker, Spin, Row, Col } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import { dayjs } from '../../../utils/format/dayjs-config';
import { fetchDataList } from '../../../utils/api/requestHelpers';
import { fetchAndSetList } from '../../../utils/api/fetchHelpers';
import '../../../utils/css/Custom-Update.css';
import NumericInput from '../../../utils/jsx/NumericInput';
import { crmInstance } from '../../../utils/api/axiosConfig';

const { Option } = Select;
const { TextArea } = Input;

const EditKhachHangTN = ({ khachHangId, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [khachHangData, setKhachHangData] = useState(null);
  const [accounts, setAccounts] = useState([]);
  const [nhomKhachHang, setNhomKhachHang] = useState([]);
  const [nguonCoHoi, setNguonCoHoi] = useState([]);

  useEffect(() => {
    if (khachHangId) fetchKhachHangData(khachHangId);
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/warehouse/accounts', setAccounts, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/crm/customer-groups', setNhomKhachHang, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√≥m kh√°ch h√†ng', 'crm');
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/crm/opportunity-sources', setNguonCoHoi, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ngu·ªìn c∆° h·ªôi', 'crm');
  }, [khachHangId]);

  const fetchKhachHangData = async (id) => {
    setFetchLoading(true);
    try {
      const response = await crmInstance.get(`/potential-customers/${id}`);
      const khachHang = response.data;
      if (!khachHang) throw new Error(`Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi m√£: ${id}`);
      
      setKhachHangData(khachHang);
      form.setFieldsValue({
        ...khachHang,
        ngay_tao: khachHang.ngay_tao ? dayjs(khachHang.ngay_tao) : null,
      });      
      message.success(`ƒê√£ t·∫£i th√¥ng tin kh√°ch h√†ng: ${khachHang.ten_khach_hang}`);
    } catch (error) {
      console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
      message.error(error.message);
    } finally {
      setFetchLoading(false);
    }
  };

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const payload = {
        ...values,
        ngay_tao: values.ngay_tao?.format('YYYY-MM-DD'),
      };
      
      console.log('üöÄ Payload g·ª≠i ƒëi:', payload);

      const response = await crmInstance.put(`/potential-customers/${khachHangId}`, payload);

      console.log('üì¶ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:', response);

      // Ki·ªÉm tra n·∫øu response l√† l·ªói
      if (response && response.status && response.status >= 400) {
        throw new Error('C·∫≠p nh·∫≠t th·∫•t b·∫°i t·ª´ server');
      }

      message.success('C·∫≠p nh·∫≠t kh√°ch h√†ng ti·ªÅm nƒÉng th√†nh c√¥ng!');
      onSuccess?.();
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√°ch h√†ng ti·ªÅm nƒÉng');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="edit-container">
      {fetchLoading ? (
        <div className="loading-container">
          <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
        </div>
      ) : (
        <>
          <h2 className="edit-title" style={{ marginBottom: 24 }}>
            Ch·ªânh s·ª≠a Kh√°ch h√†ng ti·ªÅm nƒÉng: {khachHangData?.ten_khach_hang || khachHangId}
          </h2>
          <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item 
                  name="ma_khach_hang" 
                  label="M√£ kh√°ch h√†ng"
                >
                  <Input disabled />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item 
                  name="ten_khach_hang" 
                  label="T√™n kh√°ch h√†ng" 
                  rules={[{ required: true, message: 'T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' }]}
                >
                  <Input />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item 
                  name="ma_nhom_khach_hang" 
                  label="Nh√≥m kh√°ch h√†ng" 
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn nh√≥m kh√°ch h√†ng' }]}
                >
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn nh√≥m kh√°ch h√†ng">
                    {nhomKhachHang.map(nhom => (
                      <Option key={nhom.ma_nhom_khach_hang} value={nhom.ma_nhom_khach_hang}>
                        {nhom.nhom_khach_hang}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item 
                  name="ma_nguon" 
                  label="Ngu·ªìn c∆° h·ªôi" 
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ngu·ªìn c∆° h·ªôi' }]}
                >
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ngu·ªìn c∆° h·ªôi">
                    {nguonCoHoi.map(nguon => (
                      <Option key={nguon.ma_nguon} value={nguon.ma_nguon}>
                        {nguon.nguon}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="so_dien_thoai" label="S·ªë ƒëi·ªán tho·∫°i">
                  <Input />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="email" label="Email">
                  <Input />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="dia_chi" label="ƒê·ªãa ch·ªâ">
                  <Input />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="trang_thai" label="Tr·∫°ng th√°i" rules={[{ required: true }]}>
                  <Select>
                    {['Ti·ªÅm nƒÉng', 'Quan t√¢m', 'ƒê√£ chuy·ªÉn ƒë·ªïi', 'ƒê√£ h·ªßy'].map(status => (
                      <Option key={status} value={status}>{status}</Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="doanh_thu_du_kien" label="Doanh thu d·ª± ki·∫øn">
                  <NumericInput style={{ width: '100%' }} />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="ngay_tao" label="Ng√†y t·∫°o">
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item 
                  name="nguoi_phu_trach" 
                  label="Ng∆∞·ªùi ph·ª• tr√°ch" 
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch' }]}
                >
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch">
                    {accounts.map(account => (
                      <Option key={account.ma_nguoi_dung} value={account.ma_nguoi_dung}>
                        {account.ho_va_ten}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="ghi_chu" label="Ghi ch√∫">
                  <TextArea rows={3} />
                </Form.Item>
              </Col>
            </Row>
            <div className="form-actions">
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading}>
                L∆∞u
              </Button>
              <Button icon={<CloseOutlined />} onClick={onCancel} danger>
                H·ªßy
              </Button>
            </div>
          </Form>
        </>
      )}
    </div>
  );
};

export default EditKhachHangTN;