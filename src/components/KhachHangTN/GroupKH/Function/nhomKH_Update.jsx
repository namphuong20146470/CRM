import React, { useState, useEffect } from 'react';
import { Form, Input, Button, message, Select, DatePicker, Spin, Row, Col } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import moment from 'moment';
import { fetchAndSetList } from '../../../utils/api/fetchHelpers';
import '../../../utils/css/Custom-Update.css';
import { crmInstance } from '../../../utils/api/axiosConfig';

const { Option } = Select;

const EditNhomKH = ({ nhomKHId, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [nhomKHData, setNhomKHData] = useState(null);
  const [accounts, setAccounts] = useState([]);

  useEffect(() => {
    if (nhomKHId) fetchNhomKHData(nhomKHId);
    fetchAndSetList('https://dx.hoangphucthanh.vn:3000/warehouse/accounts', setAccounts, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
  }, [nhomKHId]);

  const fetchNhomKHData = async (id) => {
    setFetchLoading(true);
    try {
      const response = await crmInstance.get(`/customer-groups/${id}`);
      const nhomKH = response.data;
      
      if (!nhomKH) throw new Error(`Kh√¥ng t√¨m th·∫•y nh√≥m kh√°ch h√†ng v·ªõi m√£: ${id}`);
      
      // Format date if it exists
      if (nhomKH.ngay_cap_nhat) {
        nhomKH.ngay_cap_nhat = moment(nhomKH.ngay_cap_nhat);
      } else {
        // Set today's date if no date exists
        nhomKH.ngay_cap_nhat = moment();
      }
      
      setNhomKHData(nhomKH);
      form.setFieldsValue(nhomKH);
      message.success(`ƒê√£ t·∫£i th√¥ng tin nh√≥m kh√°ch h√†ng: ${nhomKH.nhom_khach_hang}`);
    } catch (error) {
      console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
      message.error(`Kh√¥ng th·ªÉ t·∫£i th√¥ng tin: ${error.message}`);
    } finally {
      setFetchLoading(false);
    }
  };

  const onFinish = async (values) => {
    setLoading(true);
    try {
      // Extract ma_nhom_khach_hang from values to ensure it's not modified in the payload
      const { ma_nhom_khach_hang, ...updateData } = values;
      
      const payload = {
        ...updateData,
        ngay_cap_nhat: values.ngay_cap_nhat ? moment(values.ngay_cap_nhat).format('YYYY-MM-DD') : null,
      };

      console.log('üöÄ Payload g·ª≠i ƒëi:', payload);

      const response = await crmInstance.put(`/customer-groups/${nhomKHId}`, payload);

      console.log('üì¶ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:', response);

      // Ki·ªÉm tra n·∫øu response l√† l·ªói
      if (response && response.status && response.status >= 400) {
        throw new Error('C·∫≠p nh·∫≠t th·∫•t b·∫°i t·ª´ server');
      }

      message.success('C·∫≠p nh·∫≠t nh√≥m kh√°ch h√†ng th√†nh c√¥ng!');
      onSuccess?.();
    } catch (error) {
      console.error('‚ùå L·ªói c·∫≠p nh·∫≠t:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√≥m kh√°ch h√†ng');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="edit-container">
        {fetchLoading ? (
          <div className="loading-container">
            <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
          </div>
        ) : (
          <>
            <h2 className="edit-title" style={{ marginBottom: 24 }}>
              Ch·ªânh s·ª≠a Nh√≥m Kh√°ch H√†ng: {nhomKHData?.nhom_khach_hang || nhomKHId}
            </h2>
            <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item 
                    name="ma_nhom_khach_hang" 
                    label="M√£ nh√≥m kh√°ch h√†ng"
                    extra={`M√£ nh√≥m: ${nhomKHData?.ma_nhom_khach_hang || nhomKHId}`}
                  >
                    <Input disabled style={{ color: '#000', fontWeight: 'bold' }} />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item 
                    name="nhom_khach_hang" 
                    label="T√™n nh√≥m kh√°ch h√†ng" 
                    rules={[{ required: true, message: 'T√™n nh√≥m kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' }]}
                  >
                    <Input />
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item 
                    name="nguoi_cap_nhat" 
                    label="Ng∆∞·ªùi c·∫≠p nh·∫≠t" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng∆∞·ªùi c·∫≠p nh·∫≠t' }]}
                  >
                    <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ng∆∞·ªùi c·∫≠p nh·∫≠t">
                      {accounts.map(account => (
                        <Option key={account.ma_nguoi_dung} value={account.ma_nguoi_dung}>
                          {account.ho_va_ten}
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item 
                    name="ngay_cap_nhat" 
                    label="Ng√†y c·∫≠p nh·∫≠t"
                    rules={[{ required: true, message: 'Ng√†y c·∫≠p nh·∫≠t kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' }]}
                  >
                    <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                  </Form.Item>
                </Col>
              </Row>
              <Form.Item name="mo_ta" label="M√¥ t·∫£">
                <Input.TextArea rows={3} />
              </Form.Item>
              <div className="form-actions">
                <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading}>L∆∞u</Button>
                <Button icon={<CloseOutlined />} onClick={onCancel} danger>H·ªßy</Button>
              </div>
            </Form>
          </>
        )}
    </div>
  );
};

export default EditNhomKH;