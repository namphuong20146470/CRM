import React, { useState, useEffect } from 'react';
import { Form, Input, InputNumber, Button, Card, message, Select, DatePicker, Spin, Row, Col } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import moment from 'moment';
import { fetchDataList, updateItemById } from '../../utils/api/requestHelpers';
import '../../utils/css/Custom-Update.css';
import NumericInput from '../../utils/jsx/NumericInput';

const { Option } = Select;

const EditSupplier = ({ supplierId, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [supplierData, setSupplierData] = useState(null);

  useEffect(() => {
    if (supplierId) fetchSupplierData(supplierId);
  }, [supplierId]);

  const fetchSupplierData = async (id) => {
    setFetchLoading(true);
    try {
      const allSuppliers = await fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/suppliers');
      const supplier = allSuppliers.find(item => item.ma_nha_cung_cap === id);
      if (!supplier) throw new Error(`Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p v·ªõi m√£: ${id}`);
      if (supplier.ngay_them_vao) supplier.ngay_them_vao = moment(supplier.ngay_them_vao);
      setSupplierData(supplier);
      form.setFieldsValue(supplier);
      message.success(`ƒê√£ t·∫£i th√¥ng tin nh√† cung c·∫•p: ${supplier.ten_nha_cung_cap}`);
    } catch (error) {
      console.error('L·ªói t·∫£i d·ªØ li·ªáu:', error);
      message.error(error.message);
    } finally {
      setFetchLoading(false);
    }
  };

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const payload = {
        ...values,
        ngay_them_vao: values.ngay_them_vao?.format('YYYY-MM-DD'),
      };

      console.log('üöÄ Payload g·ª≠i ƒëi:', payload);
      
      const response = await updateItemById(`https://dx.hoangphucthanh.vn:3000/warehouse/suppliers/${supplierId}`, payload);

      console.log('üì¶ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:', response);

      // Ki·ªÉm tra n·∫øu response l√† l·ªói
      if (response && response.status && response.status >= 400) {
        throw new Error('C·∫≠p nh·∫≠t th·∫•t b·∫°i t·ª´ server');
      }

      message.success('C·∫≠p nh·∫≠t nh√† cung c·∫•p th√†nh c√¥ng!');
      onSuccess?.();
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√† cung c·∫•p');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="edit-container">
        {fetchLoading ? (
          <div className="loading-container">
            <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
          </div>
        ) : (
          <>
            <h2 className="edit-title" style={{ marginBottom: 24 }}>
              Ch·ªânh s·ª≠a Nh√† Cung C·∫•p: {supplierData?.ten_nha_cung_cap || supplierId}
            </h2>
            <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item name="ma_nha_cung_cap" label="M√£ NCC" rules={[{ required: true }]}><Input disabled /></Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item name="ten_nha_cung_cap" label="T√™n NCC" rules={[{ required: true }]}><Input /></Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item name="so_dien_thoai" label="SƒêT"><Input type="number"/></Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item name="email" label="Email" rules={[{ type: 'email'}]}><Input type="email"/></Form.Item>
                </Col>
              </Row>
              <Form.Item name="dia_chi" label="ƒê·ªãa ch·ªâ"><Input /></Form.Item>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item name="quoc_gia" label="Qu·ªëc gia" rules={[{ required: true }]}>
                    <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn qu·ªëc gia">
                      {['Vi·ªát Nam', 'ƒê·ª©c', 'M·ªπ', 'Nh·∫≠t B·∫£n', 'Trung Qu·ªëc', 'Th√°i Lan', 'Singapore', 'ƒê√†i Loan', 'Anh', 'Ph√°p', 'H√†n Qu·ªëc']
                        .map(country => <Option key={country} value={country}>{country}</Option>)}
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item name="ma_so_thue" label="M√£ s·ªë thu·∫ø"><Input type="number"/></Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item name="trang_website" label="Website"><Input type="url"/></Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item name="trang_thai" label="Tr·∫°ng th√°i" rules={[{ required: true }]}>
                    <Select>
                      {['ƒêang h·ª£p t√°c', 'Ng·ª´ng h·ª£p t√°c'].map(status => (
                        <Option key={status} value={status}>{status}</Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item name="ngay_them_vao" label="Ng√†y th√™m" rules={[{ required: true }]}>
                    <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item name="tong_no_phai_tra" label="T·ªïng n·ª£ ph·∫£i tr·∫£" rules={[{ required: true }]}>
                    <NumericInput style={{ width: '100%' }} />
                  </Form.Item>
                </Col>
              </Row>
              <Form.Item name="ghi_chu" label="Ghi ch√∫"><Input.TextArea rows={3} /></Form.Item>
              <div className="form-actions">
                <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading}>L∆∞u</Button>
                <Button icon={<CloseOutlined />} onClick={onCancel} danger>H·ªßy</Button>
              </div>
            </Form>
          </>
        )}
    </div>
  );
};

export default EditSupplier;
