import React, { useState, useEffect } from 'react';
import { Form, Input, InputNumber, Button, Card, message, Select, DatePicker, Spin, Row, Col, Radio } from 'antd';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons';
import { fetchDataList, createItem } from '../../../utils/api/requestHelpers';
import '../../../utils/css/Custom-Update.css';

const { Option } = Select;

const AddStockOut = ({ onCancel, onSuccess, disabled }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [newMaStockOut, setNewMaStockOut] = useState('');
  const [products, setProducts] = useState([]);
  const [accounts, setAccounts] = useState([]);
  const [warehouses, setWarehouses] = useState([]);
  const [filteredWarehouses, setFilteredWarehouses] = useState([]);
  const [selectedWarehouseStock, setSelectedWarehouseStock] = useState(0);
  const [customers, setCustomers] = useState([]);
  const [currentStock, setCurrentStock] = useState(0); // S·ªë l∆∞·ª£ng h√†ng hi·ªán c√≥

  useEffect(() => {
    fetchInitialData();
  }, []);

  const fetchInitialData = async () => {
    setFetchLoading(true);
    try {
      await Promise.all([
        fetchMaxSTT(),
        fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/products').then(setProducts), // L·∫•y danh s√°ch m√£ h√†ng
        fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/accounts').then(setAccounts),
        fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/warehouses').then(setWarehouses),
        fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/customers').then(setCustomers),
      ]);
    } catch (error) {
      console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu.');
    } finally {
      setFetchLoading(false);
    }
  };

  const fetchMaxSTT = async () => {
    setFetchLoading(true);
    try {
      const allStock_Out = await fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/stock-out');
      const maxSTT = allStock_Out.length ? Math.max(...allStock_Out.map(item => item.stt || 0)) : 0;
      const newSTT = maxSTT + 1;
      const generatedMaStockOut = `XK${String(newSTT)}`;
      setNewMaStockOut(generatedMaStockOut);

      // G√°n lu√¥n gi√° tr·ªã m·∫∑c ƒë·ªãnh v√†o form
      form.setFieldsValue({
        ma_stock_out: generatedMaStockOut,
      });

    } catch (error) {
      console.error('L·ªói khi l·∫•y STT:', error);
      message.error('Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√£ xu·∫•t h√†ng m·ªõi');
    } finally {
      setFetchLoading(false);
    }
  };

  const calculateCurrentStock = async (maHang) => {
  try {
    const stockInData = await fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/stock-in');
    const stockOutData = await fetchDataList('https://dx.hoangphucthanh.vn:3000/warehouse/stock-out');

    const relatedStockIn = stockInData.filter(item => item.ma_hang === maHang);
    const stockByWarehouse = {};

    // N·∫øu kh√¥ng t√¨m th·∫•y m√£ h√†ng trong b·∫•t k·ª≥ kho n√†o (stock-in), coi nh∆∞ "kh√¥ng c√≥ kho ph√π h·ª£p"
    if (relatedStockIn.length === 0) {
      setFilteredWarehouses([]);
      setCurrentStock(0);
      return;
    }

    // T√≠nh t·ªïng s·ªë l∆∞·ª£ng nh·∫≠p theo t·ª´ng kho
    relatedStockIn.forEach(item => {
      const maKho = item.ten_kho;
      stockByWarehouse[maKho] = (stockByWarehouse[maKho] || 0) + item.so_luong_nhap;
    });

    // Tr·ª´ ƒëi s·ªë l∆∞·ª£ng xu·∫•t
    stockOutData
      .filter(item => item.ma_hang === maHang)
      .forEach(item => {
        const maKho = item.ten_kho;
        stockByWarehouse[maKho] = (stockByWarehouse[maKho] || 0) - item.so_luong_xuat;
      });

    // C·∫≠p nh·∫≠t t·ªìn t·ªïng
    const totalStock = Object.values(stockByWarehouse).reduce((sum, sl) => sum + sl, 0);
    setCurrentStock(totalStock);

    // Hi·ªÉn th·ªã t·∫•t c·∫£ kho t·ª´ng ch·ª©a m√£ h√†ng (d√π SL = 0)
    const relevantMaKhoList = Object.keys(stockByWarehouse);

    const filtered = warehouses
      .filter(warehouse => relevantMaKhoList.includes(warehouse.ma_kho))
      .map(warehouse => ({
        ...warehouse,
        so_luong_hien_co: stockByWarehouse[warehouse.ma_kho] || 0
      }));

    setFilteredWarehouses(filtered);
  } catch (error) {
    console.error('L·ªói khi t√≠nh to√°n t·ªìn kho:', error);
    message.error('Kh√¥ng th·ªÉ t√≠nh s·ªë l∆∞·ª£ng h√†ng hi·ªán c√≥.');
  }
};

  const handleProductChange = (maHang) => {
    form.setFieldsValue({ so_luong_xuat: null, ten_kho: null }); // Reset kho & SL
    setSelectedWarehouseStock(0); // üîí Reset SL kho ƒë√£ ch·ªçn -> s·∫Ω kh√≥a l·∫°i input s·ªë l∆∞·ª£ng
    calculateCurrentStock(maHang);
  };

  const handleWarehouseChange = (maKho) => {
    const selected = filteredWarehouses.find(w => w.ma_kho === maKho);
    setSelectedWarehouseStock(selected?.so_luong_hien_co || 0);
  };

  const onFinish = async (values) => {
    if (values.so_luong_xuat > currentStock) {
      message.error('S·ªë l∆∞·ª£ng xu·∫•t kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n s·ªë l∆∞·ª£ng h√†ng hi·ªán c√≥.');
      return;
    }

    setLoading(true);
    try {
      const payload = {
        ...values,
        ngay_xuat_hang: values.ngay_xuat_hang?.format('YYYY-MM-DD'),
      };

      await createItem('https://dx.hoangphucthanh.vn:3000/warehouse/stock-out', payload);

      message.success('Th√™m m·ªõi xu·∫•t h√†ng th√†nh c√¥ng!');
      onSuccess?.(); // Callback reload data
    } catch (error) {
      console.error('L·ªói th√™m m·ªõi:', error);
      message.error('Kh√¥ng th·ªÉ th√™m m·ªõi xu·∫•t h√†ng.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="edit-container">
      {fetchLoading ? (
        <div className="loading-container">
          <Spin tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
        </div>
      ) : (
        <>
          <h2 className="edit-title" style={{ marginBottom: 24 }}>Th√™m m·ªõi Xu·∫•t H√†ng</h2>
          <Form form={form} layout="vertical" onFinish={onFinish} className="edit-form">
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="ma_stock_out" label="M√£ xu·∫•t" rules={[{ required: true }]}>
                  <Input disabled />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="ma_hang" label="M√£ h√†ng">
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn m√£ h√†ng" onChange={handleProductChange}>
                    {products
                      .filter((product, index, self) =>
                        index === self.findIndex(p => p.ma_hang === product.ma_hang) // Lo·∫°i b·ªè c√°c m√£ h√†ng tr√πng l·∫∑p
                      )
                      .map(product => (
                        <Option key={product.stt} value={product.ma_hang}>
                          {product.ma_hang} ({product.ten_hang})
                        </Option>
                      ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="nguoi_phu_trach" label="Ng∆∞·ªùi ph·ª• tr√°ch" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn ng∆∞·ªùi ph·ª• tr√°ch">
                    {accounts.map(account => (
                      <Option key={account.ma_nguoi_dung} value={account.ma_nguoi_dung}>
                        {account.ho_va_ten}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="ngay_xuat_hang" label="Ng√†y xu·∫•t h√†ng" rules={[{ required: true }]}>
                  <DatePicker format="DD/MM/YYYY" style={{ width: '100%' }} />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="S·ªë l∆∞·ª£ng hi·ªán c√≥">
                  <Input value={currentStock} disabled />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  name="so_luong_xuat"
                  label="S·ªë l∆∞·ª£ng xu·∫•t"
                  rules={[
                    { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng xu·∫•t' },
                    () => ({
                      validator(_, value) {
                        if (value > selectedWarehouseStock) {
                          return Promise.reject(new Error('S·ªë l∆∞·ª£ng xu·∫•t kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n s·ªë l∆∞·ª£ng hi·ªán c√≥ trong kho ƒë√£ ch·ªçn.'));
                        }
                        return Promise.resolve();
                      },
                    }),
                  ]}
                >
                  <InputNumber
                    style={{ width: '100%' }}
                    disabled={selectedWarehouseStock === 0}
                    placeholder={selectedWarehouseStock === 0 ? 'Vui l√≤ng ch·ªçn kho tr∆∞·ªõc' : 'Nh·∫≠p s·ªë l∆∞·ª£ng xu·∫•t'}
                  />
                </Form.Item>
              </Col>
            </Row>
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="ten_kho" label="Kho" rules={[{ required: true }]}>
                  {filteredWarehouses.length === 0 ? (
                    <p style={{ color: 'red' }}>Kh√¥ng c√≥ kho ph√π h·ª£p</p>
                  ) : (
                    <Radio.Group onChange={e => handleWarehouseChange(e.target.value)}>
                      {filteredWarehouses.map(warehouse => (
                        <Radio key={warehouse.ma_kho} value={warehouse.ma_kho}>
                          {`${warehouse.ten_kho} (SL: ${warehouse.so_luong_hien_co})`}
                        </Radio>
                      ))}
                    </Radio.Group>
                  )}
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="ten_khach_hang" label="T√™n kh√°ch h√†ng" rules={[{ required: true }]}>
                  <Select showSearch optionFilterProp="children" placeholder="Ch·ªçn kh√°ch h√†ng">
                    {customers.map(customer => (
                      <Option key={customer.ma_khach_hang} value={customer.ma_khach_hang}>
                        {customer.ten_khach_hang}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
            </Row>
            <div className="form-actions">
                <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading} disabled={disabled}>Th√™m</Button>
                <Button icon={<CloseOutlined />} onClick={onCancel} danger>H·ªßy</Button>
            </div>
          </Form>
        </>
      )}
    </div>
  );
};

export default AddStockOut;